@inherits LayoutComponentBase
@inject IJSRuntime JsRuntime;

<MudThemeProvider IsDarkMode="_isDarkMode"/>
<MudDialogProvider/>
<MudSnackbarProvider/>

<MudLayout>
    <MudAppBar Style="@AppBarStyle" Elevation="0">
        <MudIconButton Icon="@Icons.Material.Filled.Menu" Color="@(_isDarkMode ? Color.Inherit : Color.Dark)" Edge="Edge.Start" OnClick="@(_ => DrawerToggle())"/>
        <MudSpacer/>
        <MudTooltip Text="Source Code">
            <MudIconButton Icon="@Icons.Custom.Brands.GitHub" Color="@(_isDarkMode ? Color.Inherit : Color.Dark)" Link="https://github.com/cpa-coder/bir-tools-app.git" Target="_blank"/>
        </MudTooltip>
        <MudTooltip Text="@ThemeSwitchTooltip()">
            <MudToggleIconButton @bind-Toggled="@_isDarkMode" T="bool" Color="@(_isDarkMode ? Color.Inherit : Color.Dark)" Icon="@Icons.Material.Filled.LightMode" ToggledIcon="@Icons.Material.Filled.DarkMode"/>
        </MudTooltip>
    </MudAppBar>
    <MudDrawer  @bind-Open="_drawerOpen" Elevation="1">
        <MudDrawerHeader>
            <MudText Typo="Typo.h6">BIR Tools</MudText>
        </MudDrawerHeader>
        <NavMenu/>
    </MudDrawer>
    <MudMainContent>
        <MudContainer MaxWidth="MaxWidth.Large" Class="my-16">
            @Body
        </MudContainer>
    </MudMainContent>
</MudLayout>

@code {

    private const string SecondaryLight = "#FFFFFF";
    private const string SecondaryDark = "#27272F";
    
    private string ThemeBackground => _isDarkMode ? SecondaryDark : SecondaryLight;
    private string ShadowColor => _isDarkMode ? "0  5px 15px 0 #27272F7F" : "8px  5px 15px 0 #27272F3F";
    private string AppBarStyle => $"background:{ThemeBackground}3F; backdrop-filter: blur( 10px ); -webkit-backdrop-filter: blur( 10px ); box-shadow: {ShadowColor};";

    protected override async Task OnInitializedAsync()
    {
        _isDarkMode = await JsRuntime.InvokeAsync<bool>("preferDarkMode");
        await base.OnInitializedAsync();
    }

    bool _drawerOpen = true;
    bool _isDarkMode;

    private void DrawerToggle()
    {
        _drawerOpen = !_drawerOpen;
    }

    private string ThemeSwitchTooltip()
    {
        var label = _isDarkMode ? "Light" : "Dark";
        return $"Switch to {label} theme";
    }
}
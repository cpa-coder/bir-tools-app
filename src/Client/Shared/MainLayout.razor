@inherits LayoutComponentBase
@inject IJSRuntime JsRuntime;

<MudThemeProvider IsDarkMode="_isDarkMode"/>
<MudDialogProvider/>
<MudSnackbarProvider/>

<MudLayout>
    <MudAppBar Elevation="0">
        <MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit" Edge="Edge.Start" OnClick="@(_ => DrawerToggle())"/>
        <MudSpacer/>
        <MudIconButton Icon="@Icons.Custom.Brands.MudBlazor" Color="Color.Inherit" Link="https://mudblazor.com/" Target="_blank"/>
        <MudIconButton Icon="@Icons.Custom.Brands.GitHub" Color="Color.Inherit" Link="https://github.com/MudBlazor/MudBlazor/" Target="_blank"/>
        <MudTooltip Text="@ThemeSwitchTooltip()">
            <MudSwitch @bind-Checked="@_isDarkMode" Color="Color.Primary" Class="ma-4" T="bool" Label="@ThemeLabel()"/>
        </MudTooltip>
    </MudAppBar>
    <MudDrawer @bind-Open="                        _drawerOpen" Elevation="1">
        <MudDrawerHeader>
            <MudText Typo="Typo.h6">BIR Tools</MudText>
        </MudDrawerHeader>
        <NavMenu/>
    </MudDrawer>
    <MudMainContent>
        <MudContainer MaxWidth="MaxWidth.Large" Class="my-16">
            @Body
        </MudContainer>
    </MudMainContent>
</MudLayout>

@code {

    protected override async Task OnInitializedAsync()
    {
        _isDarkMode = await JsRuntime.InvokeAsync<bool>("preferDarkMode");
        await base.OnInitializedAsync();
    }

    bool _drawerOpen = true;
    bool _isDarkMode;

    private void DrawerToggle()
    {
        _drawerOpen = !_drawerOpen;
    }

    private string ThemeLabel() => _isDarkMode ? "Dark" : "Light";

    private string ThemeSwitchTooltip()
    {
        var label = _isDarkMode ? "Light" : "Dark";
        return $"Switch to {label} theme";
    }

}